{"version":3,"sources":["../src/index.ts","../src/abstract-relation.ts","../src/abstract-relation-helpers.ts","../src/cache-manager.ts","../src/goal-manager.ts"],"sourcesContent":["import type { Goal, Term } from \"@codespiral/logic\";\nimport { getDefaultLogger, type Logger, or } from \"@codespiral/logic\";\nimport { AbstractRelation } from \"./abstract-relation.js\";\nimport { DefaultGoalManager } from \"./goal-manager.js\";\nimport type {\n  AbstractRelationConfig,\n  DataStore,\n  GoalManager,\n  RelationOptions,\n} from \"./types.js\";\n\nexport type { RestDataStoreConfig } from \"./types.js\";\n/**\n * Factory for creating abstract relation systems\n * This is the main entry point for the abstract data layer\n */\n// Make AbstractRelationFactory generic over options type\nexport class AbstractRelationFactory<\n  TOptions extends RelationOptions = RelationOptions,\n> {\n  private goalManager: GoalManager;\n  private logger: Logger;\n  private config: AbstractRelationConfig;\n\n  constructor(\n    private dataStore: DataStore,\n    logger?: Logger,\n    config?: AbstractRelationConfig,\n  ) {\n    this.logger = logger ?? getDefaultLogger();\n    this.goalManager = new DefaultGoalManager();\n    this.config = config ?? {};\n  }\n\n  /**\n   * Get the appropriate relation identifier based on datastore type and options\n   */\n  private getRelationIdentifier(table: string, options?: TOptions): string {\n    // For REST APIs, prefer pathTemplate as the identifier since it's more meaningful\n    if (this.dataStore.type === \"rest\") {\n      const restOptions = options as any;\n      if (restOptions?.pathTemplate) {\n        return restOptions.pathTemplate;\n      }\n    }\n    // For SQL or when no pathTemplate, use table name\n    return table;\n  }\n\n  /**\n   * Create a regular relation for a table\n   */\n  createRelation(table: string, options?: TOptions) {\n    // For REST APIs, use pathTemplate as identifier if available, otherwise use table name\n    // For SQL APIs, always use table name\n    const relationIdentifier = this.getRelationIdentifier(table, options);\n\n    const relation = new AbstractRelation<TOptions>(\n      this.dataStore,\n      this.goalManager,\n      relationIdentifier,\n      this.logger,\n      options,\n      this.config,\n    );\n\n    return (queryObj: Record<string, Term>): Goal => {\n      return relation.createGoal(queryObj);\n    };\n  }\n\n  /**\n   * Create a symmetric relation for bidirectional queries\n   */\n  createSymmetricRelation(\n    table: string,\n    keys: [string, string],\n    options?: RelationOptions,\n  ) {\n    const relationIdentifier = this.getRelationIdentifier(\n      table,\n      options as TOptions,\n    );\n\n    const relation = new AbstractRelation(\n      this.dataStore,\n      this.goalManager,\n      relationIdentifier,\n      this.logger,\n      options,\n      this.config,\n    );\n\n    return (queryObj: Record<string, Term>): Goal => {\n      // Create both directions of the query\n      const queryObjSwapped = {\n        [keys[0]]: queryObj[keys[1]],\n        [keys[1]]: queryObj[keys[0]],\n      };\n\n      return or(\n        relation.createGoal(queryObj),\n        relation.createGoal(queryObjSwapped),\n      );\n    };\n  }\n\n  /**\n   * Get debugging information\n   */\n  getQueries(): string[] {\n    return this.goalManager.getQueries();\n  }\n\n  clearQueries(): void {\n    this.goalManager.clearQueries();\n  }\n\n  getQueryCount(): number {\n    return this.goalManager.getQueryCount();\n  }\n\n  /**\n   * Access the underlying data store\n   */\n  getDataStore(): DataStore {\n    return this.dataStore;\n  }\n\n  /**\n   * Close the data store connection\n   */\n  async close(): Promise<void> {\n    if (this.dataStore.close) {\n      await this.dataStore.close();\n    }\n  }\n}\n\n/**\n * Main factory function - creates an abstract relation system\n */\nexport function createAbstractRelationSystem<\n  TOptions extends RelationOptions = RelationOptions,\n>(dataStore: DataStore, logger?: Logger, config?: AbstractRelationConfig) {\n  const factory = new AbstractRelationFactory<TOptions>(\n    dataStore,\n    logger,\n    config,\n  );\n\n  return {\n    rel: factory.createRelation.bind(factory),\n    relSym: factory.createSymmetricRelation?.bind(factory),\n    getQueries: factory.getQueries.bind(factory),\n    clearQueries: factory.clearQueries.bind(factory),\n    getQueryCount: factory.getQueryCount.bind(factory),\n    getDataStore: factory.getDataStore.bind(factory),\n    close: factory.close.bind(factory),\n  };\n}\n\nexport { AbstractRelation } from \"./abstract-relation.js\";\nexport { DefaultCacheManager } from \"./cache-manager.js\";\nexport { DefaultGoalManager } from \"./goal-manager.js\";\n// Re-export types and implementations\nexport type {\n  AbstractRelationConfig,\n  DataRow,\n  DataStore,\n  GoalManager,\n  QueryParams,\n  RelationOptions,\n  WhereCondition,\n} from \"./types.js\";\n","import type { Goal, Subst, Term } from \"@codespiral/logic\";\nimport {\n  GOAL_GROUP_ALL_GOALS,\n  GOAL_GROUP_CONJ_GOALS,\n  getDefaultLogger,\n  isVar,\n  type Logger,\n  walk,\n} from \"@codespiral/logic\";\nimport { SimpleObservable } from \"@codespiral/observable\";\nimport type { Observable } from \"@codespiral/observable\";\nimport {\n  buildWhereConditions,\n  canMergeQueries,\n  collectAllWhereClauses,\n  collectColumnsFromGoals,\n  collectWhereClausesFromSubstitutions,\n  couldBenefitFromCache,\n  unifyRowWithQuery,\n} from \"./abstract-relation-helpers.js\";\nimport { DefaultCacheManager } from \"./cache-manager.js\";\nimport type {\n  AbstractRelationConfig,\n  CacheManager,\n  DataRow,\n  DataStore,\n  GoalManager,\n  GoalRecord,\n  QueryParams,\n  RelationOptions,\n} from \"./types.js\";\n\n// WeakMap to link observables to their goal IDs\nconst observableToGoalId = new WeakMap<Observable<any>, number>();\n\n// Default batch configuration\nconst DEFAULT_BATCH_SIZE = 100;\nconst DEFAULT_DEBOUNCE_MS = 50;\n\n/**\n * Abstract relation engine that handles batching, caching, and query optimization\n * Works with any DataStore implementation\n */\n// Make AbstractRelation generic over options type\nexport class AbstractRelation<\n  TOptions extends RelationOptions = RelationOptions,\n> {\n  private logger: Logger;\n  private cacheManager: CacheManager;\n  private config: Required<AbstractRelationConfig>;\n\n  constructor(\n    private dataStore: DataStore,\n    private goalManager: GoalManager,\n    private relationIdentifier: string,\n    logger?: Logger,\n    private _options?: TOptions,\n    config?: AbstractRelationConfig,\n  ) {\n    this.logger = logger ?? getDefaultLogger();\n    this.cacheManager = config?.cacheManager ?? new DefaultCacheManager();\n\n    // Set default config\n    this.config = {\n      batchSize: config?.batchSize ?? DEFAULT_BATCH_SIZE,\n      debounceMs: config?.debounceMs ?? DEFAULT_DEBOUNCE_MS,\n      enableCaching: config?.enableCaching ?? true,\n      enableQueryMerging: config?.enableQueryMerging ?? true,\n      cacheManager: this.cacheManager,\n    };\n  }\n\n  /**\n   * Create a goal for this relation\n   */\n  createGoal(queryObj: Record<string, Term>): Goal {\n    const goalId = this.goalManager.getNextGoalId();\n\n    this.logger.log(\"GOAL_CREATED\", {\n      goalId,\n      relationIdentifier: this.relationIdentifier,\n      queryObj,\n      dataStore: this.dataStore.type,\n    });\n\n    // Register goal\n    this.goalManager.addGoal(\n      goalId,\n      this.relationIdentifier,\n      queryObj,\n      undefined,\n      this._options,\n    );\n\n    // Create the goal function\n    const goalFunction = (input$: Observable<Subst>) => {\n      return new SimpleObservable<Subst>((observer) => {\n        let cancelled = false;\n        let batchIndex = 0;\n        let inputComplete = false;\n\n        this.logger.log(\"GOAL_STARTED\", {\n          goalId,\n          relationIdentifier: this.relationIdentifier,\n          queryObj,\n          dataStore: this.dataStore.type,\n        });\n\n        // Create batch processor\n        const batchProcessor = this.createBatchProcessor({\n          batchSize: this.config.batchSize,\n          debounceMs: this.config.debounceMs,\n          onFlush: async (batch) => {\n            if (cancelled) return;\n\n            this.logger.log(\"FLUSH_BATCH\", {\n              goalId,\n              batchIndex,\n              batchSize: batch.length,\n              dataStore: this.dataStore.type,\n            });\n\n            // Process batch\n            const rows = await this.executeQueryForSubstitutions(\n              goalId,\n              queryObj,\n              batch as Subst[],\n            );\n\n            // Find cache-compatible goals\n            const representativeSubst = batch[0];\n            const myGoal = this.goalManager.getGoalById(goalId);\n            let cacheCompatibleGoals: GoalRecord[] = [];\n\n            if (myGoal && representativeSubst) {\n              const relatedGoals = await this.findRelatedGoals(\n                myGoal,\n                representativeSubst as Subst,\n              );\n              cacheCompatibleGoals = this.findCacheCompatibleGoals(\n                myGoal,\n                relatedGoals,\n                representativeSubst as Subst,\n              );\n            }\n\n            await this.processFreshRows(\n              goalId,\n              queryObj,\n              rows,\n              batch as Subst[],\n              observer,\n              cacheCompatibleGoals,\n            );\n\n            batchIndex++;\n          },\n        });\n\n        // Subscribe to input stream\n        let active = 0;\n        let completed = false;\n        const subscription = input$.subscribe({\n          next: async (subst: Subst) => {\n            if (cancelled) return;\n            active++;\n\n            this.logger.log(\"GOAL_NEXT\", {\n              goalId,\n              batchIndex,\n              inputComplete,\n              dataStore: this.dataStore.type,\n            });\n\n            // Check cache first if caching is enabled\n            if (this.config.enableCaching) {\n              const cachedRows = this.cacheManager.get(goalId, subst);\n              if (cachedRows) {\n                this.logger.log(\"CACHE_HIT_IMMEDIATE\", {\n                  goalId,\n                  rowCount: cachedRows.length,\n                  relationIdentifier: this.relationIdentifier,\n                  dataStore: this.dataStore.type,\n                });\n\n                await this.processCachedRows(\n                  goalId,\n                  queryObj,\n                  cachedRows,\n                  subst,\n                  observer,\n                );\n                active--;\n                if (completed && active === 0) observer.complete?.();\n\n                return; // Don't add to batch if we had a cache hit\n              }\n            }\n\n            // Cache miss - add to batch\n            batchProcessor.addItem(subst);\n            this.logger.log(\"CACHE_MISS_TO_BATCH\", {\n              goalId,\n              inputComplete,\n              dataStore: this.dataStore.type,\n            });\n            active--;\n            if (completed && active === 0) observer.complete?.();\n          },\n          error: (err: any) => {\n            if (!cancelled) observer.error?.(err);\n          },\n          complete: () => {\n            this.logger.log(\"UPSTREAM_GOAL_COMPLETE\", {\n              goalId,\n              batchIndex,\n              inputComplete,\n              cancelled,\n              dataStore: this.dataStore.type,\n            });\n\n            inputComplete = true;\n            batchProcessor\n              .complete()\n              .then(() => {\n                this.logger.log(\"GOAL_COMPLETE\", {\n                  goalId,\n                  batchIndex,\n                  inputComplete,\n                  cancelled,\n                  dataStore: this.dataStore.type,\n                });\n\n                completed = true;\n                if (completed && active === 0) observer.complete?.();\n              })\n              .catch((e) => {\n                console.error(e);\n                // Silently handle completion errors to prevent unhandled rejections\n                completed = true;\n                if (completed && active === 0) observer.complete?.();\n              });\n          },\n        });\n\n        return () => {\n          this.logger.log(\"GOAL_CANCELLED\", {\n            goalId,\n            batchIndex,\n            inputComplete,\n            cancelled,\n            dataStore: this.dataStore.type,\n          });\n          cancelled = true;\n          batchProcessor.cancel();\n          subscription.unsubscribe?.();\n        };\n      });\n    };\n\n    // Set up goal metadata\n    const displayName = `${this.dataStore.type.toUpperCase()}_${this.relationIdentifier}_${goalId}`;\n    goalFunction.displayName = displayName;\n    observableToGoalId.set(goalFunction as unknown as Observable<any>, goalId);\n\n    return goalFunction;\n  }\n\n  /**\n   * Execute query for a set of substitutions\n   */\n  private async executeQueryForSubstitutions(\n    goalId: number,\n    queryObj: Record<string, Term>,\n    substitutions: Subst[],\n  ): Promise<DataRow[]> {\n    if (substitutions.length === 0) return [];\n\n    this.logger.log(\"EXECUTING_UNIFIED_QUERY\", {\n      goalId,\n      substitutionCount: substitutions.length,\n      relationIdentifier: this.relationIdentifier,\n      dataStore: this.dataStore.type,\n    });\n\n    const myGoal = this.goalManager.getGoalById(goalId);\n    if (!myGoal) return [];\n\n    const representativeSubst = substitutions[0];\n\n    // Find related goals for merging and caching\n    const relatedGoals = await this.findRelatedGoals(\n      myGoal,\n      representativeSubst,\n    );\n    const mergeCompatibleGoals = this.config.enableQueryMerging\n      ? this.findMergeCompatibleGoals(myGoal, relatedGoals)\n      : [];\n    const cacheCompatibleGoals = this.config.enableCaching\n      ? this.findCacheCompatibleGoals(myGoal, relatedGoals, representativeSubst)\n      : [];\n\n    // Build and execute query\n    return await this.buildAndExecuteQuery(\n      goalId,\n      queryObj,\n      substitutions,\n      mergeCompatibleGoals,\n      cacheCompatibleGoals,\n    );\n  }\n\n  /**\n   * Build query parameters and execute via data store\n   */\n  private async buildAndExecuteQuery(\n    goalId: number,\n    queryObj: Record<string, Term>,\n    substitutions: Subst[],\n    mergeCompatibleGoals: GoalRecord[],\n    cacheCompatibleGoals: GoalRecord[],\n  ): Promise<DataRow[]> {\n    // Collect WHERE clauses from substitutions\n    const whereClauses = await this.collectWhereClausesFromSubstitutions(\n      queryObj,\n      substitutions,\n    );\n\n    // If we have merge-compatible goals, include their WHERE clauses too\n    if (mergeCompatibleGoals.length > 0) {\n      const myGoal = this.goalManager.getGoalById(goalId);\n      if (myGoal) {\n        const allGoalsToMerge = [myGoal, ...mergeCompatibleGoals];\n        const goalWhereClauses = await this.collectAllWhereClauses(\n          allGoalsToMerge,\n          substitutions[0],\n        );\n\n        // Merge goal WHERE clauses with substitution WHERE clauses\n        for (const [col, values] of Object.entries(goalWhereClauses)) {\n          if (whereClauses[col]) {\n            for (const value of values) {\n              whereClauses[col].add(value);\n            }\n          } else {\n            whereClauses[col] = new Set(values);\n          }\n        }\n      }\n    }\n\n    // Collect columns from all relevant goals\n    const columns = this.collectColumnsFromGoals(\n      queryObj,\n      cacheCompatibleGoals,\n      mergeCompatibleGoals,\n    );\n\n    // Convert to data store format\n    const whereConditions = this.buildWhereConditions(whereClauses);\n\n    const mergeCompatibleGoalIds = mergeCompatibleGoals\n      .map((x) => x.goalId)\n      .join(\",\");\n    const cacheCompatibleGoalIds = cacheCompatibleGoals\n      .map((x) => x.goalId)\n      .join(\",\");\n    const iffmt = (v: string | undefined, fn: (v: string) => string) =>\n      v ? fn(v) : \"\";\n    const annotatedLogQuery = (queryString: string) =>\n      this.goalManager.addQuery(\n        `G:${goalId}${iffmt(mergeCompatibleGoalIds, (v) => ` M:${v}`)}${iffmt(cacheCompatibleGoalIds, (v) => ` C:${v}`)} - ${queryString}`,\n      );\n\n    const queryParams: QueryParams = {\n      relationIdentifier: this.relationIdentifier,\n      selectColumns: columns.columns,\n      whereConditions,\n      relationOptions: this._options,\n      goalId,\n      logQuery: annotatedLogQuery,\n    };\n\n    // Execute via data store (it will handle query logging)\n    const rows = await this.dataStore.executeQuery(queryParams);\n\n    this.logger.log(\"DB_QUERY_EXECUTED\", {\n      goalId,\n      relationIdentifier: this.relationIdentifier,\n      rowCount: rows.length,\n      queryParams,\n      dataStore: this.dataStore.type,\n    });\n\n    return rows;\n  }\n\n  /**\n   * Find related goals for merging and caching\n   */\n  private async findRelatedGoals(\n    myGoal: GoalRecord,\n    s: Subst,\n  ): Promise<{ goal: GoalRecord; matchingIds: string[] }[]> {\n    // Get goal groups from substitution (matches current SQL implementation)\n    const innerGroupGoals = (s.get(GOAL_GROUP_CONJ_GOALS) as Goal[]) || [];\n    const outerGroupGoals = (s.get(GOAL_GROUP_ALL_GOALS) as Goal[]) || [];\n\n    // const goalsForCaching = outerGroupGoals.length > 0 ? outerGroupGoals : innerGroupGoals;\n    const goalsForCaching = outerGroupGoals;\n\n    if (goalsForCaching.length === 0) {\n      return [];\n    }\n\n    // Look up goal IDs for each goal function using the WeakMap\n    const otherGoalIds = goalsForCaching\n      .map((goalFn) =>\n        observableToGoalId.get(goalFn as unknown as Observable<any>),\n      )\n      .filter(\n        (goalId) => goalId !== undefined && goalId !== myGoal.goalId,\n      ) as number[];\n\n    // Get the goal records\n    const otherGoals = otherGoalIds\n      .map((goalId) => this.goalManager.getGoalById(goalId))\n      .filter((goal) => goal !== undefined) as GoalRecord[];\n\n    this.logger.log(\"FOUND_RELATED_GOALS\", {\n      myGoalId: myGoal.goalId,\n      myGoalQueryObj: myGoal.queryObj,\n      foundOtherGoalIds: otherGoalIds,\n      relatedGoals: otherGoals.map((g) => ({\n        goalId: g.goalId,\n        relationIdentifier: g.relationIdentifier,\n        queryObj: g.queryObj,\n      })),\n      dataStore: this.dataStore.type,\n    });\n\n    return otherGoals.map((goal) => ({\n      goal,\n      matchingIds: [], // Empty for now - could implement variable matching logic\n    }));\n  }\n\n  /**\n   * Find goals that are compatible for query merging\n   */\n  private findMergeCompatibleGoals(\n    myGoal: GoalRecord,\n    relatedGoals: { goal: GoalRecord; matchingIds: string[] }[],\n  ): GoalRecord[] {\n    const compatibleGoals: GoalRecord[] = [];\n    for (const { goal } of relatedGoals) {\n      if (\n        goal.relationIdentifier === myGoal.relationIdentifier &&\n        this.canMergeQueries(myGoal, goal)\n      ) {\n        compatibleGoals.push(goal);\n      }\n    }\n\n    this.logger.log(\"MERGE_COMPATIBILITY_CHECK\", {\n      myGoalId: myGoal.goalId,\n      candidateGoals: relatedGoals.map((g) => ({\n        goalId: g.goal.goalId,\n        queryObj: g.goal.queryObj,\n      })),\n      mergeCompatibleGoalIds: compatibleGoals.map((g) => g.goalId),\n      relationIdentifier: this.relationIdentifier,\n      dataStore: this.dataStore.type,\n    });\n\n    return compatibleGoals;\n  }\n\n  /**\n   * Find goals that are compatible for result caching\n   */\n  private findCacheCompatibleGoals(\n    myGoal: GoalRecord,\n    relatedGoals: { goal: GoalRecord; matchingIds: string[] }[],\n    subst: Subst,\n  ): GoalRecord[] {\n    const cacheBeneficiaryGoals: GoalRecord[] = [];\n    const candidateGoalsWithCompatibility = [];\n\n    for (const { goal } of relatedGoals) {\n      const isCompatible = this.couldBenefitFromCache(myGoal, goal, subst);\n\n      candidateGoalsWithCompatibility.push({\n        goalId: goal.goalId,\n        queryObj: goal.queryObj,\n        cacheCompatible: isCompatible,\n      });\n\n      if (isCompatible === \"match\") {\n        cacheBeneficiaryGoals.push(goal);\n      }\n    }\n\n    this.logger.log(\"CACHE_COMPATIBILITY_CHECK\", {\n      myGoalId: myGoal.goalId,\n      myGoalQueryObj: myGoal.queryObj,\n      candidateGoals: candidateGoalsWithCompatibility,\n      cacheCompatibleGoalIds: cacheBeneficiaryGoals.map((g) => g.goalId),\n      relationIdentifier: this.relationIdentifier,\n      dataStore: this.dataStore.type,\n    });\n\n    return cacheBeneficiaryGoals;\n  }\n\n  /**\n   * Process cached rows\n   */\n  private async processCachedRows(\n    goalId: number,\n    queryObj: Record<string, Term>,\n    cachedRows: DataRow[],\n    subst: Subst,\n    observer: any,\n  ): Promise<void> {\n    // Filter cached rows to match current substitution\n    const filteredRows = cachedRows.filter((row) => {\n      for (const [col, term] of Object.entries(queryObj)) {\n        const grounded = walk(term, subst);\n        if (!isVar(grounded) && row[col] !== grounded) {\n          return false;\n        }\n      }\n      return true;\n    });\n\n    this.logger.log(\"CACHE_ROWS_PROCESSED\", {\n      goalId,\n      originalCount: cachedRows.length,\n      filteredCount: filteredRows.length,\n      relationIdentifier: this.relationIdentifier,\n      dataStore: this.dataStore.type,\n    });\n\n    for (const row of filteredRows) {\n      const unifiedSubst = this.unifyRowWithQuery(\n        row,\n        queryObj,\n        new Map(subst),\n      );\n      if (unifiedSubst) {\n        observer.next(unifiedSubst);\n      }\n      await new Promise((resolve) => setTimeout(() => resolve(undefined), 0));\n    }\n  }\n\n  /**\n   * Process fresh query rows\n   */\n  private async processFreshRows(\n    goalId: number,\n    queryObj: Record<string, Term>,\n    rows: DataRow[],\n    substitutions: Subst[],\n    observer: any,\n    cacheCompatibleGoals: GoalRecord[],\n  ): Promise<void> {\n    for (const subst of substitutions) {\n      // Clear any existing cache for this goal\n      if (this.config.enableCaching) {\n        this.cacheManager.clear(goalId);\n      }\n\n      if (rows.length === 0) {\n        this.logger.log(\"DB_NO_ROWS\", {\n          goalId,\n          queryObj,\n          wasFromCache: false,\n          relationIdentifier: this.relationIdentifier,\n          dataStore: this.dataStore.type,\n        });\n        continue;\n      }\n\n      for (const row of rows) {\n        const unifiedSubst = this.unifyRowWithQuery(\n          row,\n          queryObj,\n          new Map(subst),\n        );\n        if (unifiedSubst) {\n          // Cache rows for compatible goals\n          if (this.config.enableCaching) {\n            for (const otherGoal of cacheCompatibleGoals) {\n              if (otherGoal.goalId !== goalId) {\n                this.cacheManager.set(otherGoal.goalId, unifiedSubst, rows, {\n                  fromGoalId: goalId,\n                });\n                this.logger.log(\"CACHED_FOR_OTHER_GOAL\", {\n                  myGoalId: goalId,\n                  otherGoalId: otherGoal.goalId,\n                  rowCount: rows.length,\n                  dataStore: this.dataStore.type,\n                });\n              }\n            }\n          }\n\n          this.logger.log(\"UNIFY_SUCCESS\", {\n            goalId,\n            queryObj,\n            row,\n            wasFromCache: false,\n            relationIdentifier: this.relationIdentifier,\n            dataStore: this.dataStore.type,\n          });\n\n          observer.next(unifiedSubst);\n          await new Promise((resolve) => setTimeout(resolve, 0));\n        } else {\n          this.logger.log(\"UNIFY_FAILURE\", {\n            goalId,\n            queryObj,\n            row,\n            wasFromCache: false,\n            relationIdentifier: this.relationIdentifier,\n            dataStore: this.dataStore.type,\n          });\n        }\n      }\n    }\n  }\n\n  // Helper method delegates\n  private couldBenefitFromCache = couldBenefitFromCache;\n  private canMergeQueries = canMergeQueries;\n  private collectWhereClausesFromSubstitutions =\n    collectWhereClausesFromSubstitutions;\n  private collectAllWhereClauses = collectAllWhereClauses;\n  private collectColumnsFromGoals = collectColumnsFromGoals;\n  private buildWhereConditions = buildWhereConditions;\n  private unifyRowWithQuery = unifyRowWithQuery;\n\n  /**\n   * Create a batch processor utility\n   */\n  private createBatchProcessor<T>(options: {\n    batchSize: number;\n    debounceMs: number;\n    onFlush: (batch: T[]) => Promise<void> | void;\n  }): {\n    addItem: (item: T) => void;\n    complete: () => Promise<void>;\n    cancel: () => void;\n  } {\n    let batch: T[] = [];\n    let debounceTimer: NodeJS.Timeout | null = null;\n    let flushingPromise: Promise<void> | null = null;\n    let cancelled = false;\n\n    const clearDebounce = (): void => {\n      if (debounceTimer) {\n        clearTimeout(debounceTimer);\n        debounceTimer = null;\n      }\n    };\n\n    const flushBatch = (): Promise<void> => {\n      clearDebounce();\n      if (flushingPromise) return flushingPromise;\n      if (batch.length === 0 || cancelled) return Promise.resolve();\n\n      const toFlush = batch;\n      batch = [];\n      flushingPromise = Promise.resolve(options.onFlush(toFlush)).finally(\n        () => {\n          flushingPromise = null;\n        },\n      );\n      return flushingPromise;\n    };\n\n    const addItem = (item: T): void => {\n      // if (cancelled) return;\n      batch.push(item);\n      if (batch.length >= options.batchSize) {\n        flushBatch();\n      } else {\n        clearDebounce();\n        debounceTimer = setTimeout(() => flushBatch(), options.debounceMs);\n      }\n    };\n\n    const complete = async (): Promise<void> => {\n      await flushBatch();\n    };\n\n    const cancel = (): void => {\n      cancelled = true;\n      clearDebounce();\n      batch = [];\n    };\n\n    return {\n      addItem,\n      complete,\n      cancel,\n    };\n  }\n}\n","import type { Subst, Term } from \"@codespiral/logic\";\nimport { isVar, queryUtils, unify, walk } from \"@codespiral/logic\";\nimport type {\n  DataRow,\n  GoalRecord,\n  QueryParams,\n  WhereCondition,\n} from \"./types.js\";\n\n/**\n * Helper functions for AbstractRelation\n * Extracted to keep the main class focused\n */\n\n/**\n * Check if one goal could benefit from cached data of another goal\n */\nexport function couldBenefitFromCache(\n  myGoal: GoalRecord,\n  otherGoal: GoalRecord,\n  subst: Subst,\n): string {\n  if (myGoal.relationIdentifier !== otherGoal.relationIdentifier) {\n    return \"different_relation\";\n  }\n\n  // // Check if relation options are compatible for caching\n  // // For REST APIs, different pathTemplates mean different endpoints\n  // const myOptions = myGoal.relationOptions as any;\n  // const otherOptions = otherGoal.relationOptions as any;\n\n  // if (myOptions?.pathTemplate !== otherOptions?.pathTemplate) {\n  //   return \"different_path_template\";\n  // }\n\n  // // Add other option compatibility checks as needed\n  // if (JSON.stringify(myOptions) !== JSON.stringify(otherOptions)) {\n  //   return \"incompatible_options\";\n  // }\n\n  const myColumns = Object.keys(myGoal.queryObj);\n  const otherColumns = Object.keys(otherGoal.queryObj);\n\n  let matches = 0;\n\n  for (const column of myColumns) {\n    if (otherColumns.includes(column)) {\n      const myValueRaw = myGoal.queryObj[column];\n      const otherValueRaw = otherGoal.queryObj[column];\n      const myValue = walk(myValueRaw, subst);\n      const otherValue = walk(otherValueRaw, subst);\n\n      if (!isVar(myValue)) {\n        if (!isVar(otherValue)) {\n          if (myValue === otherValue) {\n            matches++;\n          } else {\n            return \"value_not_match\";\n          }\n        } else {\n          return \"term_to_var\";\n        }\n      } else {\n        if (isVar(otherValue)) {\n          matches++;\n        } else {\n          return \"var_to_term\";\n        }\n      }\n    }\n  }\n\n  if (matches > 0) {\n    return \"match\";\n  }\n  return \"no_matches\";\n}\n\n/**\n * Check if two goals can have their queries merged\n */\nexport function canMergeQueries(goalA: GoalRecord, goalB: GoalRecord): boolean {\n  const aColumns = Object.keys(goalA.queryObj);\n  const bColumns = Object.keys(goalB.queryObj);\n\n  if (aColumns.length !== bColumns.length) {\n    return false;\n  }\n\n  if (!aColumns.every((col) => bColumns.includes(col))) {\n    return false;\n  }\n\n  for (const column of aColumns) {\n    const aValue = goalA.queryObj[column];\n    const bValue = goalB.queryObj[column];\n\n    if (isVar(aValue) && isVar(bValue)) {\n      if (aValue.id !== bValue.id) {\n        return false;\n      }\n    } else if (isVar(aValue) || isVar(bValue)) {\n      return false;\n    } else {\n      if (aValue !== bValue) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\n/**\n * Collect WHERE clauses from a set of goals for merging\n */\nexport async function collectAllWhereClauses(\n  goals: GoalRecord[],\n  s: Subst,\n): Promise<Record<string, Set<any>>> {\n  const allWhereClauses: Record<string, Set<any>> = {};\n  for (const goal of goals) {\n    const whereCols = queryUtils.onlyGrounded(goal.queryObj);\n    for (const [col, value] of Object.entries(whereCols)) {\n      if (!allWhereClauses[col]) allWhereClauses[col] = new Set();\n      allWhereClauses[col].add(value);\n    }\n  }\n  return allWhereClauses;\n}\n\n/**\n * Collect WHERE clauses from substitutions for batching\n */\nexport async function collectWhereClausesFromSubstitutions(\n  queryObj: Record<string, Term>,\n  substitutions: Subst[],\n): Promise<Record<string, Set<any>>> {\n  const whereClauses: Record<string, Set<any>> = {};\n  for (const subst of substitutions) {\n    const walked = await queryUtils.walkAllKeys(queryObj, subst);\n    const whereCols = queryUtils.onlyGrounded(walked);\n    for (const [col, value] of Object.entries(whereCols)) {\n      if (!whereClauses[col]) whereClauses[col] = new Set();\n      whereClauses[col].add(value);\n    }\n  }\n  return whereClauses;\n}\n\n/**\n * Collect all columns needed for query from goals\n */\nexport function collectColumnsFromGoals(\n  myQueryObj: Record<string, Term>,\n  cacheCompatibleGoals: GoalRecord[],\n  mergeCompatibleGoals?: GoalRecord[],\n): { columns: string[]; additionalColumns: string[] } {\n  const allGoalColumns = new Set<string>();\n\n  // Add columns from current goal\n  Object.keys(myQueryObj).forEach((col) => allGoalColumns.add(col));\n\n  // Add columns from merge-compatible goals\n  if (mergeCompatibleGoals) {\n    for (const goal of mergeCompatibleGoals) {\n      Object.keys(goal.queryObj).forEach((col) => allGoalColumns.add(col));\n    }\n  }\n\n  // Add columns from cache-compatible goals\n  for (const cacheGoal of cacheCompatibleGoals) {\n    Object.keys(cacheGoal.queryObj).forEach((col) => allGoalColumns.add(col));\n  }\n\n  const additionalColumns: string[] = []; // Could be from options\n  const columns = [...new Set([...allGoalColumns, ...additionalColumns])];\n\n  return {\n    columns,\n    additionalColumns,\n  };\n}\n\n/**\n * Build WHERE conditions from clause sets\n */\nexport function buildWhereConditions(\n  whereClauses: Record<string, Set<any>>,\n): WhereCondition[] {\n  const conditions: WhereCondition[] = [];\n\n  for (const [column, values] of Object.entries(whereClauses)) {\n    if (values.size === 1) {\n      conditions.push({\n        column,\n        operator: \"eq\",\n        value: Array.from(values)[0],\n      });\n    } else if (values.size > 1) {\n      conditions.push({\n        column,\n        operator: \"in\",\n        value: null,\n        values: Array.from(values),\n      });\n    }\n  }\n\n  return conditions;\n}\n\n/**\n * Format query parameters for logging\n */\nexport function sssformatQueryForLog(params: QueryParams): string {\n  let query = `SELECT ${params.selectColumns.join(\", \")} FROM ${params.relationIdentifier}`;\n\n  if (params.whereConditions.length > 0) {\n    const whereClause = params.whereConditions\n      .map((cond) => {\n        if (cond.operator === \"in\" && cond.values) {\n          return `${cond.column} IN (${cond.values.map((v) => (typeof v === \"string\" ? `'${v}'` : v)).join(\", \")})`;\n        } else {\n          const value =\n            typeof cond.value === \"string\" ? `'${cond.value}'` : cond.value;\n          return `${cond.column} = ${value}`;\n        }\n      })\n      .join(\" AND \");\n    query += ` WHERE ${whereClause}`;\n  }\n\n  if (params.limit) {\n    query += ` LIMIT ${params.limit}`;\n  }\n\n  if (params.offset) {\n    query += ` OFFSET ${params.offset}`;\n  }\n\n  return query;\n}\n\n/**\n * Unify a data row with a query object\n */\nexport function unifyRowWithQuery(\n  row: DataRow,\n  queryObj: Record<string, Term>,\n  s: Subst,\n): Subst | null {\n  let result = s;\n  for (const [column, term] of Object.entries(queryObj)) {\n    const value = row[column];\n    if (value === undefined) continue;\n    const unified = unify(term, value, result);\n    if (unified === null) {\n      return null;\n    }\n    result = unified;\n  }\n  return result;\n}\n","import type { Subst } from \"@codespiral/logic\";\nimport type { CacheEntry, CacheManager, DataRow } from \"./types.js\";\n\nconst ROW_CACHE = Symbol.for(\"abstract-row-cache\");\n\n/**\n * Default cache manager that stores cache entries in substitution objects\n * This matches the current SQL implementation behavior\n */\nexport class DefaultCacheManager implements CacheManager {\n  /**\n   * Get cached rows for a goal from a substitution\n   */\n  get(goalId: number, subst: Subst): DataRow[] | null {\n    const cache = this.getOrCreateRowCache(subst);\n    if (cache.has(goalId)) {\n      const entry = cache.get(goalId)!;\n      return entry.data;\n    }\n    return null;\n  }\n\n  /**\n   * Set cached rows for a goal in a substitution\n   */\n  set(\n    goalId: number,\n    subst: Subst,\n    rows: DataRow[],\n    meta?: Record<string, any>,\n  ): void {\n    const cache = this.getOrCreateRowCache(subst);\n    cache.set(goalId, {\n      data: rows,\n      timestamp: Date.now(),\n      goalId,\n      meta,\n    });\n  }\n\n  /**\n   * Clear cache entries\n   */\n  clear(goalId?: number): void {\n    // Note: This implementation clears from a specific substitution\n    // For global clearing, you'd need to track all substitutions\n    if (goalId !== undefined) {\n      // Clear specific goal - would need access to all active substitutions\n      // This is a limitation of the current design\n    }\n    // For now, we rely on substitution-local clearing\n  }\n\n  /**\n   * Check if cache entry exists\n   */\n  has(goalId: number, subst: Subst): boolean {\n    const cache = this.getOrCreateRowCache(subst);\n    return cache.has(goalId);\n  }\n\n  /**\n   * Remove cache entry for a specific goal from a substitution\n   */\n  delete(goalId: number, subst: Subst): void {\n    const cache = this.getOrCreateRowCache(subst);\n    cache.delete(goalId);\n  }\n\n  /**\n   * Get or create the cache map from a substitution\n   */\n  private getOrCreateRowCache(subst: Subst): Map<number, CacheEntry> {\n    if (!subst.has(ROW_CACHE)) {\n      subst.set(ROW_CACHE, new Map<number, CacheEntry>());\n    }\n    return subst.get(ROW_CACHE) as Map<number, CacheEntry>;\n  }\n\n  /**\n   * Format cache for logging (matches current implementation)\n   */\n  formatCacheForLog(subst: Subst): Record<number, any> {\n    const result: Record<number, any> = {};\n    const cache = subst.get(ROW_CACHE);\n    if (!(cache instanceof Map)) return result;\n\n    for (const [goalId, entry] of cache.entries()) {\n      if (Array.isArray(entry.data)) {\n        if (entry.data.length <= 5) {\n          result[goalId] = entry.data;\n        } else {\n          result[goalId] = {\n            count: entry.data.length,\n            timestamp: entry.timestamp,\n          };\n        }\n      }\n    }\n    return result;\n  }\n}\n","import type { Term } from \"@codespiral/logic\";\nimport type { GoalManager, GoalRecord } from \"./types.js\";\n\n/**\n * Default implementation of GoalManager\n * Handles goal tracking, ID generation, and query logging\n */\nexport class DefaultGoalManager implements GoalManager {\n  private goals: GoalRecord[] = [];\n  private queries: string[] = [];\n  private nextGoalId = 0;\n\n  getNextGoalId(): number {\n    return ++this.nextGoalId;\n  }\n\n  addGoal(\n    goalId: number,\n    relationIdentifier: string,\n    queryObj: Record<string, Term>,\n    batchKey?: string,\n    relationOptions?: any,\n  ): void {\n    this.goals.push({\n      goalId,\n      relationIdentifier,\n      queryObj,\n      batchKey,\n      relationOptions,\n    });\n  }\n\n  getGoalById(id: number): GoalRecord | undefined {\n    return this.goals.find((goal) => goal.goalId === id);\n  }\n\n  getGoalsByBatchKey(batchKey: string): GoalRecord[] {\n    return this.goals.filter((goal) => goal.batchKey === batchKey);\n  }\n\n  getGoals(): GoalRecord[] {\n    return [...this.goals];\n  }\n\n  clearGoals(): void {\n    this.goals.length = 0;\n  }\n\n  addQuery(query: string): void {\n    this.queries.push(query);\n  }\n\n  getQueries(): string[] {\n    return [...this.queries];\n  }\n\n  clearQueries(): void {\n    this.queries.length = 0;\n  }\n\n  getQueryCount(): number {\n    return this.queries.length;\n  }\n}\n"],"mappings":"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","names":["getDefaultLogger","isVar","walk","walk","isVar","getDefaultLogger"]}