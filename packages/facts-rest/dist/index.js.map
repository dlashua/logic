{"version":3,"sources":["../src/index.ts","../src/rest-datastore.ts"],"sourcesContent":["import type {\n\tAbstractRelationConfig,\n\tRestDataStoreConfig,\n} from \"facts-abstract\";\nimport { createAbstractRelationSystem } from \"facts-abstract\";\nimport { getDefaultLogger } from \"logic\";\nimport type { RelationCache } from \"./relation-cache.js\";\nimport { RestDataStore } from \"./rest-datastore.js\";\nimport type { RestRelationOptions } from \"./types.js\";\n\n/**\n * REST API implementation using the abstract data layer\n * Example of how to create a facts system backed by a REST API\n */\nexport const makeRelREST = async (\n\trestConfig: RestDataStoreConfig & {\n\t\tcache?: RelationCache;\n\t\tcacheMethods?: string[];\n\t},\n\tconfig?: AbstractRelationConfig,\n) => {\n\tconst logger = getDefaultLogger();\n\n\t// Create REST data store\n\tconst dataStore = new RestDataStore(restConfig);\n\n\t// Configure the abstract relation system\n\tconst systemConfig: AbstractRelationConfig = {\n\t\tbatchSize: 50, // Smaller batches for REST APIs\n\t\tdebounceMs: 100, // Longer debounce for network calls\n\t\tenableCaching: true,\n\t\tenableQueryMerging: false, // REST APIs might not benefit from query merging\n\t\t...config,\n\t};\n\n\t// Create the abstract relation system\n\tconst relationSystem = createAbstractRelationSystem<RestRelationOptions>(\n\t\tdataStore,\n\t\tlogger,\n\t\tsystemConfig,\n\t);\n\n\t// Patch rel to accept cache option per relation\n\tconst origRel = relationSystem.rel;\n\tfunction rel(\n\t\tpathTemplate: string,\n\t\toptions: RestRelationOptions & { cache?: RelationCache | null } = {},\n\t) {\n\t\t// If cache is explicitly set, create a new RestDataStore for this rel with the given cache\n\t\tif (Object.hasOwn(options, \"cache\")) {\n\t\t\tconst relCache = options.cache;\n\t\t\tconst relDataStore = new RestDataStore({\n\t\t\t\t...restConfig,\n\t\t\t\tcache: relCache,\n\t\t\t});\n\t\t\tconst relSystem = createAbstractRelationSystem<RestRelationOptions>(\n\t\t\t\trelDataStore,\n\t\t\t\tlogger,\n\t\t\t\tsystemConfig,\n\t\t\t);\n\t\t\treturn relSystem.rel(pathTemplate, options);\n\t\t}\n\t\t// Otherwise, use the default system\n\t\treturn origRel(pathTemplate, options);\n\t}\n\n\treturn {\n\t\trel,\n\t\trelSym: relationSystem.relSym,\n\t\tgetQueries: relationSystem.getQueries,\n\t\tclearQueries: relationSystem.clearQueries,\n\t\tgetQueryCount: relationSystem.getQueryCount,\n\t\tclose: relationSystem.close,\n\t\tgetDataStore: relationSystem.getDataStore,\n\t};\n};\n\n// Re-export for convenience\nexport type { RestDataStoreConfig } from \"facts-abstract\";\n","import type {\n\tDataRow,\n\tDataStore,\n\tQueryParams,\n\tRestDataStoreConfig,\n\tWhereCondition,\n} from \"facts-abstract\";\nimport type { RelationCache } from \"./relation-cache.js\";\nimport type { RestRelationOptions } from \"./types.js\";\n\n/**\n * REST API implementation of DataStore\n * Demonstrates how the abstract interface can work with different backends\n */\nexport class RestDataStore implements DataStore {\n\treadonly type = \"rest\";\n\n\tprivate config: Required<RestDataStoreConfig>;\n\tprivate cache?: RelationCache | null;\n\tprivate cacheMethods: string[];\n\tprivate cachePrefix: string;\n\n\tconstructor(\n\t\tconfig: RestDataStoreConfig & {\n\t\t\tcache?: RelationCache | null;\n\t\t\tcacheMethods?: string[];\n\t\t\tcachePrefix?: string;\n\t\t},\n\t) {\n\t\tthis.config = {\n\t\t\tbaseUrl: config.baseUrl.replace(/\\/$/, \"\"), // Remove trailing slash\n\t\t\tapiKey: config.apiKey ?? \"\",\n\t\t\ttimeout: config.timeout ?? 30000,\n\t\t\theaders: config.headers ?? {},\n\t\t\tpagination: {\n\t\t\t\tlimitParam: config.pagination?.limitParam ?? \"limit\",\n\t\t\t\toffsetParam: config.pagination?.offsetParam ?? \"offset\",\n\t\t\t\tmaxPageSize: config.pagination?.maxPageSize ?? 1000,\n\t\t\t\t...config.pagination,\n\t\t\t},\n\t\t\tfeatures: {\n\t\t\t\tprimaryKeyInPath: config.features?.primaryKeyInPath ?? false,\n\t\t\t\tsupportsInOperator: config.features?.supportsInOperator ?? true,\n\t\t\t\tsupportsFieldSelection: config.features?.supportsFieldSelection ?? true,\n\t\t\t\turlBuilder: config.features?.urlBuilder,\n\t\t\t\tqueryParamFormatter: config.features?.queryParamFormatter,\n\t\t\t\t...config.features,\n\t\t\t},\n\t\t};\n\t\tthis.cache = config.cache;\n\t\tthis.cacheMethods = config.cacheMethods ?? [\"GET\"];\n\t\tthis.cachePrefix = config.cachePrefix ?? \"\";\n\t}\n\n\tasync executeQuery(params: QueryParams): Promise<DataRow[]> {\n\t\t// Detect a 'limit' whereCondition and move it to params.limit\n\t\tlet limitFromWhere: number | undefined;\n\t\tconst filteredWhere = params.whereConditions.filter((c) => {\n\t\t\tif (\n\t\t\t\tc.column === \"limit\" &&\n\t\t\t\tc.operator === \"eq\" &&\n\t\t\t\ttypeof c.value === \"number\"\n\t\t\t) {\n\t\t\t\tlimitFromWhere = c.value;\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t});\n\t\tconst effectiveParams = {\n\t\t\t...params,\n\t\t\tlimit: limitFromWhere ?? params.limit,\n\t\t\twhereConditions: filteredWhere,\n\t\t\trelationOptions: params.relationOptions as RestRelationOptions,\n\t\t};\n\n\t\t// Handle IN operations that don't support comma-separated values\n\t\tif (!this.config.features.supportsInOperator) {\n\t\t\treturn await this.executeQueryWithoutInOperator(effectiveParams);\n\t\t}\n\n\t\t// Build URL - check for primary key in path\n\t\tconst { baseUrl, primaryKeyCondition, otherConditions } =\n\t\t\tthis.buildUrl(effectiveParams);\n\t\tconst url = new URL(baseUrl);\n\n\t\t// Add non-primary-key WHERE conditions as query parameters\n\t\tfor (const condition of otherConditions) {\n\t\t\tthis.addConditionToUrl(url, condition);\n\t\t}\n\n\t\t// Add field selection (if the API supports it)\n\t\tif (\n\t\t\tthis.config.features.supportsFieldSelection &&\n\t\t\teffectiveParams.selectColumns.length > 0\n\t\t) {\n\t\t\turl.searchParams.append(\n\t\t\t\t\"fields\",\n\t\t\t\teffectiveParams.selectColumns.join(\",\"),\n\t\t\t);\n\t\t}\n\n\t\t// Add pagination\n\t\t// this.addPaginationToUrl(url, effectiveParams);\n\n\t\t// Execute the request\n\t\treturn await this.executeHttpRequest(url.toString(), effectiveParams);\n\t}\n\n\tprivate async executeQueryWithoutInOperator(\n\t\tparams: QueryParams,\n\t): Promise<DataRow[]> {\n\t\t// Find IN conditions and split them into multiple queries\n\t\tconst inConditions = params.whereConditions.filter(\n\t\t\t(c) => c.operator === \"in\" && c.values,\n\t\t);\n\t\tconst otherConditions = params.whereConditions.filter(\n\t\t\t(c) => !(c.operator === \"in\" && c.values),\n\t\t);\n\n\t\tif (inConditions.length === 0) {\n\t\t\t// No IN conditions, execute normally but bypass the IN operator check\n\t\t\treturn await this.executeQueryDirect({\n\t\t\t\t...params,\n\t\t\t\twhereConditions: otherConditions,\n\t\t\t});\n\t\t}\n\n\t\t// Execute multiple queries for each IN condition value\n\t\tconst allResults: DataRow[] = [];\n\t\tfor (const inCondition of inConditions) {\n\t\t\tif (inCondition.values) {\n\t\t\t\tfor (const value of inCondition.values) {\n\t\t\t\t\tconst eqCondition = {\n\t\t\t\t\t\tcolumn: inCondition.column,\n\t\t\t\t\t\toperator: \"eq\" as const,\n\t\t\t\t\t\tvalue: value,\n\t\t\t\t\t};\n\t\t\t\t\tconst queryParams = {\n\t\t\t\t\t\t...params,\n\t\t\t\t\t\twhereConditions: [...otherConditions, eqCondition],\n\t\t\t\t\t};\n\t\t\t\t\tconst results = await this.executeQueryDirect(queryParams);\n\t\t\t\t\t// Tag each result row with the IN value for correct unification\n\t\t\t\t\tfor (const row of results) {\n\t\t\t\t\t\tallResults.push({\n\t\t\t\t\t\t\t...row,\n\t\t\t\t\t\t\t[inCondition.column]: value,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Remove duplicates (in case of overlapping results)\n\t\tconst uniqueResults = allResults.filter(\n\t\t\t(row, index, self) =>\n\t\t\t\tindex ===\n\t\t\t\tself.findIndex((r) => JSON.stringify(r) === JSON.stringify(row)),\n\t\t);\n\n\t\treturn uniqueResults;\n\t}\n\n\tprivate async executeQueryDirect(params: QueryParams): Promise<DataRow[]> {\n\t\t// Direct execution without IN operator check to avoid recursion\n\t\tconst { baseUrl, primaryKeyCondition, otherConditions } =\n\t\t\tthis.buildUrl(params);\n\t\tconst url = new URL(baseUrl);\n\n\t\t// Add non-primary-key WHERE conditions as query parameters\n\t\tfor (const condition of otherConditions) {\n\t\t\tthis.addConditionToUrl(url, condition);\n\t\t}\n\n\t\t// Add field selection (if the API supports it)\n\t\tif (\n\t\t\tthis.config.features.supportsFieldSelection &&\n\t\t\tparams.selectColumns.length > 0\n\t\t) {\n\t\t\turl.searchParams.append(\"fields\", params.selectColumns.join(\",\"));\n\t\t}\n\n\t\t// Add pagination\n\t\t// this.addPaginationToUrl(url, params);\n\n\t\t// Execute the request\n\t\treturn await this.executeHttpRequest(url.toString(), params);\n\t}\n\n\tprivate buildUrl(params: QueryParams): {\n\t\tbaseUrl: string;\n\t\tprimaryKeyCondition: WhereCondition | null;\n\t\totherConditions: WhereCondition[];\n\t} {\n\t\t// --- Flexible path template logic ---\n\t\tfunction fillPathTemplate(\n\t\t\ttemplate: string,\n\t\t\twhereConditions: WhereCondition[],\n\t\t): { path: string; usedColumns: Set<string> } {\n\t\t\tconst usedColumns = new Set<string>();\n\t\t\tlet path = template.replace(/:([a-zA-Z0-9_]+)\\??/g, (_, key) => {\n\t\t\t\tconst cond = whereConditions.find(\n\t\t\t\t\t(c) => c.column === key && c.operator === \"eq\",\n\t\t\t\t);\n\t\t\t\tif (cond && cond.value !== undefined && cond.value !== null) {\n\t\t\t\t\tusedColumns.add(key);\n\t\t\t\t\treturn encodeURIComponent(cond.value);\n\t\t\t\t}\n\t\t\t\t// If optional (ends with ?), remove segment if not present\n\t\t\t\treturn \"\";\n\t\t\t});\n\t\t\t// Remove double slashes from missing optional params\n\t\t\tpath = path.replace(/\\/+/g, \"/\").replace(/\\/$/, \"\");\n\t\t\treturn {\n\t\t\t\tpath,\n\t\t\t\tusedColumns,\n\t\t\t};\n\t\t}\n\n\t\tlet path = \"\";\n\t\tlet usedColumns = new Set<string>();\n\n\t\tif (params.relationIdentifier) {\n\t\t\tconst filled = fillPathTemplate(\n\t\t\t\tparams.relationIdentifier,\n\t\t\t\tparams.whereConditions,\n\t\t\t);\n\t\t\tpath = filled.path;\n\t\t\tusedColumns = filled.usedColumns;\n\t\t} else if (this.config.features.primaryKeyInPath) {\n\t\t\t// Look for primary key condition using relation options\n\t\t\tconst primaryKeyColumn =\n\t\t\t\tparams.relationOptions?.restPrimaryKey ||\n\t\t\t\tparams.relationOptions?.primaryKey;\n\t\t\tlet primaryKeyCondition: WhereCondition | null = null;\n\t\t\tlet otherConditions: WhereCondition[] = [];\n\t\t\tif (primaryKeyColumn) {\n\t\t\t\t// Find condition that matches the primary key column\n\t\t\t\tprimaryKeyCondition =\n\t\t\t\t\tparams.whereConditions.find(\n\t\t\t\t\t\t(c) => c.column === primaryKeyColumn && c.operator === \"eq\",\n\t\t\t\t\t) || null;\n\n\t\t\t\tif (primaryKeyCondition) {\n\t\t\t\t\totherConditions = params.whereConditions.filter(\n\t\t\t\t\t\t(c) => c !== primaryKeyCondition,\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\totherConditions = params.whereConditions;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\totherConditions = params.whereConditions;\n\t\t\t}\n\t\t\tif (primaryKeyCondition) {\n\t\t\t\tpath = `/${params.relationIdentifier}/${primaryKeyCondition.value}`;\n\t\t\t\t// @ts-expect-error\n\t\t\t\tusedColumns.add(primaryKeyColumn);\n\t\t\t} else {\n\t\t\t\tpath = `/${params.relationIdentifier}`;\n\t\t\t}\n\t\t} else {\n\t\t\tpath = `/${params.relationIdentifier}`;\n\t\t}\n\t\t// Remove used columns from query params\n\t\tconst otherConditions = params.whereConditions.filter(\n\t\t\t(c) => !usedColumns.has(c.column),\n\t\t);\n\t\tconst baseUrl = `${this.config.baseUrl}${path}`;\n\t\treturn {\n\t\t\tbaseUrl,\n\t\t\tprimaryKeyCondition: null,\n\t\t\totherConditions,\n\t\t};\n\t}\n\n\tprivate addConditionToUrl(url: URL, condition: WhereCondition): void {\n\t\tif (this.config.features.queryParamFormatter) {\n\t\t\tconst formatted = this.config.features.queryParamFormatter(\n\t\t\t\tcondition.column,\n\t\t\t\tcondition.operator,\n\t\t\t\tcondition.value,\n\t\t\t);\n\t\t\turl.searchParams.append(formatted.key, formatted.value);\n\t\t\treturn;\n\t\t}\n\n\t\t// Default behavior\n\t\tif (condition.operator === \"eq\") {\n\t\t\turl.searchParams.append(condition.column, String(condition.value));\n\t\t} else if (condition.operator === \"in\" && condition.values) {\n\t\t\tif (this.config.features.supportsInOperator) {\n\t\t\t\turl.searchParams.append(condition.column, condition.values.join(\",\"));\n\t\t\t}\n\t\t\t// If doesn't support IN, this will be handled by executeQueryWithoutInOperator\n\t\t} else if (condition.operator === \"gt\") {\n\t\t\turl.searchParams.append(\n\t\t\t\t`${condition.column}[gt]`,\n\t\t\t\tString(condition.value),\n\t\t\t);\n\t\t} else if (condition.operator === \"lt\") {\n\t\t\turl.searchParams.append(\n\t\t\t\t`${condition.column}[lt]`,\n\t\t\t\tString(condition.value),\n\t\t\t);\n\t\t} else if (condition.operator === \"gte\") {\n\t\t\turl.searchParams.append(\n\t\t\t\t`${condition.column}[gte]`,\n\t\t\t\tString(condition.value),\n\t\t\t);\n\t\t} else if (condition.operator === \"lte\") {\n\t\t\turl.searchParams.append(\n\t\t\t\t`${condition.column}[lte]`,\n\t\t\t\tString(condition.value),\n\t\t\t);\n\t\t} else if (condition.operator === \"like\") {\n\t\t\turl.searchParams.append(\n\t\t\t\t`${condition.column}[like]`,\n\t\t\t\tString(condition.value),\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate addPaginationToUrl(url: URL, params: QueryParams): void {\n\t\tif (params.limit && this.config.pagination.limitParam) {\n\t\t\tconst limit = Math.min(\n\t\t\t\tparams.limit,\n\t\t\t\tthis.config.pagination.maxPageSize ?? params.limit,\n\t\t\t);\n\t\t\turl.searchParams.append(this.config.pagination.limitParam, String(limit));\n\t\t}\n\t\tif (params.offset && this.config.pagination.offsetParam) {\n\t\t\turl.searchParams.append(\n\t\t\t\tthis.config.pagination.offsetParam,\n\t\t\t\tString(params.offset),\n\t\t\t);\n\t\t}\n\t}\n\n\t// Helper: auto-paginate for APIs with { results: [], page: number } format\n\tprivate async fetchAllPages(\n\t\turl: string,\n\t\tparams: QueryParams,\n\t\tinitialData: any,\n\t\tinitialPage: number,\n\t\tpageSize: number,\n\t\ttotalLimit: number,\n\t): Promise<DataRow[]> {\n\t\tconst allResults: DataRow[] = Array.isArray(initialData.results)\n\t\t\t? initialData.results\n\t\t\t: [];\n\t\tlet page = initialPage;\n\t\tconst done = false;\n\t\t// Cache the initial page if caching is enabled\n\t\tconst method = \"GET\";\n\t\tconst shouldCache = this.cache && this.cacheMethods.includes(method);\n\t\tconst limitKey = params.limit !== undefined ? `:limit=${params.limit}` : \"\";\n\t\tif (shouldCache) {\n\t\t\tconst cacheKey = this.cachePrefix + method + \":\" + url + limitKey;\n\t\t\tawait this.cache!.set(cacheKey, initialData.results);\n\t\t}\n\t\twhile (!done && allResults.length < totalLimit) {\n\t\t\tpage++;\n\t\t\tconst pagedUrl = new URL(url);\n\t\t\tpagedUrl.searchParams.set(\"page\", String(page));\n\t\t\tpagedUrl.searchParams.set(\"limit\", String(pageSize));\n\t\t\tconst pagedUrlStr = pagedUrl.toString();\n\t\t\tlet pageResults: any[] | undefined;\n\t\t\tlet fromCache = false;\n\t\t\tconst pageLimitKey =\n\t\t\t\tparams.limit !== undefined ? `:limit=${params.limit}` : \"\";\n\t\t\tif (shouldCache) {\n\t\t\t\tconst cacheKey =\n\t\t\t\t\tthis.cachePrefix + method + \":\" + pagedUrlStr + pageLimitKey;\n\t\t\t\tconst cached = await this.cache!.get(cacheKey);\n\t\t\t\tif (cached !== undefined) {\n\t\t\t\t\tpageResults = Array.isArray(cached)\n\t\t\t\t\t\t? cached\n\t\t\t\t\t\t: cached &&\n\t\t\t\t\t\t\t\ttypeof cached === \"object\" &&\n\t\t\t\t\t\t\t\tArray.isArray(cached.results)\n\t\t\t\t\t\t\t? cached.results\n\t\t\t\t\t\t\t: [];\n\t\t\t\t\tfromCache = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!fromCache) {\n\t\t\t\tconst response = await fetch(pagedUrlStr, {\n\t\t\t\t\tmethod: \"GET\",\n\t\t\t\t\theaders: {\n\t\t\t\t\t\tAccept: \"application/json\",\n\t\t\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\t\t\t...this.config.headers,\n\t\t\t\t\t\t...(this.config.apiKey\n\t\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\t\tAuthorization: `Bearer ${this.config.apiKey}`,\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t: {}),\n\t\t\t\t\t},\n\t\t\t\t\tsignal: AbortSignal.timeout(this.config.timeout),\n\t\t\t\t});\n\t\t\t\tif (!response.ok) break;\n\t\t\t\tconst data = await response.json();\n\t\t\t\tpageResults = Array.isArray(data.results) ? data.results : [];\n\t\t\t\tif (shouldCache) {\n\t\t\t\t\tconst cacheKey =\n\t\t\t\t\t\tthis.cachePrefix + method + \":\" + pagedUrlStr + pageLimitKey;\n\t\t\t\t\tawait this.cache!.set(cacheKey, pageResults);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!pageResults || pageResults.length === 0) break;\n\t\t\tallResults.push(...pageResults);\n\t\t\tif (pageResults.length < pageSize) break; // last page\n\t\t}\n\t\treturn allResults.slice(0, totalLimit);\n\t}\n\n\tprivate async executeHttpRequest(\n\t\turl: string,\n\t\tparams: QueryParams,\n\t): Promise<DataRow[]> {\n\t\t// Prepare headers\n\t\tconst headers: Record<string, string> = {\n\t\t\tAccept: \"application/json\",\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t...this.config.headers,\n\t\t};\n\n\t\tif (this.config.apiKey) {\n\t\t\theaders[\"Authorization\"] = `Bearer ${this.config.apiKey}`;\n\t\t}\n\n\t\t// Determine HTTP method (default GET)\n\t\tconst method = \"GET\"; // TODO: support other methods if needed\n\t\tconst limitKey = params.limit !== undefined ? `:limit=${params.limit}` : \"\";\n\t\tconst cacheKey = this.cachePrefix + method + \":\" + url + limitKey;\n\n\t\tconst shouldCache = this.cache && this.cacheMethods.includes(method);\n\n\t\tif (shouldCache) {\n\t\t\tconst cached = await this.cache!.get(cacheKey);\n\t\t\tif (cached !== undefined) {\n\t\t\t\tif (params.logQuery) {\n\t\t\t\t\tconst headersStr =\n\t\t\t\t\t\tObject.keys(headers).length > 2\n\t\t\t\t\t\t\t? ` Headers: ${JSON.stringify({\n\t\t\t\t\t\t\t\t\t...headers,\n\t\t\t\t\t\t\t\t\tAuthorization: undefined,\n\t\t\t\t\t\t\t\t})}`\n\t\t\t\t\t\t\t: \"\";\n\t\t\t\t\tparams.logQuery(`[CACHED] ${method} ${url}${headersStr}`);\n\t\t\t\t}\n\t\t\t\tif (Array.isArray(cached)) {\n\t\t\t\t\treturn cached;\n\t\t\t\t}\n\t\t\t\tif (typeof cached === \"string\") {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst arr = JSON.parse(cached);\n\t\t\t\t\t\tif (Array.isArray(arr)) return arr;\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t/* ignore parse error */\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (cached && typeof cached === \"object\") return [cached];\n\t\t\t\treturn [];\n\t\t\t}\n\t\t}\n\n\t\t// Log the actual HTTP request\n\t\tif (params.logQuery) {\n\t\t\tconst headersStr =\n\t\t\t\tObject.keys(headers).length > 2\n\t\t\t\t\t? ` Headers: ${JSON.stringify({\n\t\t\t\t\t\t\t...headers,\n\t\t\t\t\t\t\tAuthorization: undefined,\n\t\t\t\t\t\t})}`\n\t\t\t\t\t: \"\";\n\t\t\tparams.logQuery(`${method} ${url}${headersStr}`);\n\t\t}\n\n\t\t// Execute the request\n\t\tconst response = await fetch(url, {\n\t\t\tmethod,\n\t\t\theaders,\n\t\t\tsignal: AbortSignal.timeout(this.config.timeout),\n\t\t});\n\n\t\tif (!response.ok) {\n\t\t\tthrow new Error(\n\t\t\t\t`REST API error: ${response.status} ${response.statusText} @${url}`,\n\t\t\t);\n\t\t}\n\n\t\tconst data = await response.json();\n\n\t\t// Auto-paginate if response is { results: [], page: number }\n\t\tconst totalLimit = params.limit ?? 50;\n\t\tlet result: DataRow[];\n\t\tif (data && Array.isArray(data.results) && typeof data.page === \"number\") {\n\t\t\tif (data.results.length >= totalLimit) {\n\t\t\t\tresult = data.results.slice(0, totalLimit);\n\t\t\t} else {\n\t\t\t\t// Fetch more pages if needed\n\t\t\t\tconst pageSize = data.results.length;\n\t\t\t\tif (pageSize === 0) return [];\n\t\t\t\tresult = await this.fetchAllPages(\n\t\t\t\t\turl,\n\t\t\t\t\tparams,\n\t\t\t\t\tdata,\n\t\t\t\t\tdata.page,\n\t\t\t\t\tpageSize,\n\t\t\t\t\ttotalLimit,\n\t\t\t\t);\n\t\t\t}\n\t\t} else if (Array.isArray(data)) {\n\t\t\tresult = data;\n\t\t} else if (data.data && Array.isArray(data.data)) {\n\t\t\tresult = data.data;\n\t\t} else if (data.results && Array.isArray(data.results)) {\n\t\t\tresult = data.results;\n\t\t} else if (typeof data === \"object\" && data !== null) {\n\t\t\tresult = [data];\n\t\t} else {\n\t\t\tconsole.error(\"UNEXPECTED FORMAT\");\n\t\t\tthrow new Error(\n\t\t\t\t`Unexpected REST API response format: ${JSON.stringify(data)}`,\n\t\t\t);\n\t\t}\n\n\t\tif (shouldCache) {\n\t\t\tawait this.cache!.set(cacheKey, result);\n\t\t}\n\t\treturn result;\n\t}\n\n\tasync getColumns(relationIdentifier: string): Promise<string[]> {\n\t\t// This would typically require a schema endpoint\n\t\t// For now, we'll return an empty array or make a sample query\n\t\ttry {\n\t\t\tconst url = `${this.config.baseUrl}/${relationIdentifier}`;\n\t\t\tconst headers: Record<string, string> = {\n\t\t\t\tAccept: \"application/json\",\n\t\t\t\t...this.config.headers,\n\t\t\t};\n\n\t\t\tif (this.config.apiKey) {\n\t\t\t\theaders[\"Authorization\"] = `Bearer ${this.config.apiKey}`;\n\t\t\t}\n\n\t\t\t// Try to get first record to infer schema\n\t\t\tconsole.log(\"FETCH COLUMNS\", url);\n\t\t\tconst response = await fetch(`${url}?limit=1`, {\n\t\t\t\tmethod: \"GET\",\n\t\t\t\theaders,\n\t\t\t\tsignal: AbortSignal.timeout(this.config.timeout),\n\t\t\t});\n\n\t\t\tif (response.ok) {\n\t\t\t\tconst data = await response.json();\n\t\t\t\tconst records = Array.isArray(data)\n\t\t\t\t\t? data\n\t\t\t\t\t: data.data || data.results || [];\n\t\t\t\tif (records.length > 0) {\n\t\t\t\t\treturn Object.keys(records[0]);\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.warn(\n\t\t\t\t`Could not infer columns for relationIdentifier ${relationIdentifier}:`,\n\t\t\t\terror,\n\t\t\t);\n\t\t}\n\n\t\treturn [];\n\t}\n\n\tbuildWhereConditions(clauses: Record<string, Set<any>>): WhereCondition[] {\n\t\tconst conditions: WhereCondition[] = [];\n\n\t\tfor (const [column, values] of Object.entries(clauses)) {\n\t\t\tif (values.size === 1) {\n\t\t\t\tconditions.push({\n\t\t\t\t\tcolumn,\n\t\t\t\t\toperator: \"eq\",\n\t\t\t\t\tvalue: Array.from(values)[0],\n\t\t\t\t});\n\t\t\t} else if (values.size > 1) {\n\t\t\t\tconditions.push({\n\t\t\t\t\tcolumn,\n\t\t\t\t\toperator: \"in\",\n\t\t\t\t\tvalue: null,\n\t\t\t\t\tvalues: Array.from(values),\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\treturn conditions;\n\t}\n\n\tasync close(): Promise<void> {\n\t\t// No cleanup needed for REST API\n\t}\n}\n"],"mappings":"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","names":["usedColumns","path","otherConditions"]}