{"version":3,"sources":["../src/index.ts","../src/sql-datastore.ts"],"sourcesContent":["import type { AbstractRelationConfig } from \"facts-abstract\";\nimport { createAbstractRelationSystem } from \"facts-abstract\";\nimport type { Knex } from \"knex\";\nimport knex from \"knex\";\nimport type { BaseConfig as Configuration } from \"logic\";\nimport { getDefaultLogger, Logger } from \"logic\";\nimport { SqlDataStore } from \"./sql-datastore.js\";\n\n/**\n * SQL implementation using the abstract data layer\n * This is a drop-in replacement for the old facts-sql module\n */\nexport const makeRelDB = async (\n\tknex_connect_options: Knex.Config,\n\toptions?: Record<string, string>,\n\tconfigOverrides?: Partial<Configuration>,\n) => {\n\toptions ??= {};\n\n\tconst logger = getDefaultLogger();\n\tconst db = knex(knex_connect_options);\n\n\t// Create SQL data store\n\tconst dataStore = new SqlDataStore(db);\n\n\t// Configure the abstract relation system\n\tconst config: AbstractRelationConfig = {\n\t\tbatchSize: 100,\n\t\tdebounceMs: 50,\n\t\tenableCaching: true,\n\t\tenableQueryMerging: true,\n\t\t...configOverrides,\n\t};\n\n\t// Create the abstract relation system\n\tconst relationSystem = createAbstractRelationSystem(\n\t\tdataStore,\n\t\tlogger,\n\t\tconfig,\n\t);\n\n\treturn {\n\t\trel: relationSystem.rel,\n\t\trelSym: relationSystem.relSym,\n\t\tdb,\n\t\tgetQueries: relationSystem.getQueries,\n\t\tclearQueries: relationSystem.clearQueries,\n\t\tgetQueryCount: relationSystem.getQueryCount,\n\t\tclose: relationSystem.close,\n\t};\n};\n","import type {\n\tDataRow,\n\tDataStore,\n\tQueryParams,\n\tWhereCondition,\n} from \"facts-abstract\";\nimport type { Knex } from \"knex\";\n\n/**\n * SQL implementation of DataStore using Knex\n * This wraps the existing SQL logic into the abstract interface\n */\nexport class SqlDataStore implements DataStore {\n\treadonly type = \"sql\";\n\n\tconstructor(private db: Knex) {}\n\n\tasync executeQuery(params: QueryParams): Promise<DataRow[]> {\n\t\tlet query = this.db(params.relationIdentifier);\n\n\t\t// Apply WHERE conditions\n\t\tfor (const condition of params.whereConditions) {\n\t\t\tif (condition.operator === \"eq\") {\n\t\t\t\tquery = query.where(condition.column, condition.value);\n\t\t\t} else if (condition.operator === \"in\" && condition.values) {\n\t\t\t\tquery = query.whereIn(condition.column, condition.values);\n\t\t\t} else if (condition.operator === \"gt\") {\n\t\t\t\tquery = query.where(condition.column, \">\", condition.value);\n\t\t\t} else if (condition.operator === \"lt\") {\n\t\t\t\tquery = query.where(condition.column, \"<\", condition.value);\n\t\t\t} else if (condition.operator === \"gte\") {\n\t\t\t\tquery = query.where(condition.column, \">=\", condition.value);\n\t\t\t} else if (condition.operator === \"lte\") {\n\t\t\t\tquery = query.where(condition.column, \"<=\", condition.value);\n\t\t\t} else if (condition.operator === \"like\") {\n\t\t\t\tquery = query.where(condition.column, \"like\", condition.value);\n\t\t\t}\n\t\t}\n\n\t\t// Select columns\n\t\tquery = query.select(params.selectColumns);\n\n\t\t// Apply pagination if specified\n\t\tif (params.limit) {\n\t\t\tquery = query.limit(params.limit);\n\t\t}\n\t\tif (params.offset) {\n\t\t\tquery = query.offset(params.offset);\n\t\t}\n\n\t\t// Log the actual SQL query\n\t\tif (params.logQuery) {\n\t\t\tparams.logQuery(`${query.toString()}`);\n\t\t}\n\n\t\treturn await query;\n\t}\n\n\tasync getColumns(relationIdentifier: string): Promise<string[]> {\n\t\tconst result = await this.db(relationIdentifier).columnInfo();\n\t\treturn Object.keys(result);\n\t}\n\n\tbuildWhereConditions(clauses: Record<string, Set<any>>): WhereCondition[] {\n\t\tconst conditions: WhereCondition[] = [];\n\n\t\tfor (const [column, values] of Object.entries(clauses)) {\n\t\t\tif (values.size === 1) {\n\t\t\t\tconditions.push({\n\t\t\t\t\tcolumn,\n\t\t\t\t\toperator: \"eq\",\n\t\t\t\t\tvalue: Array.from(values)[0],\n\t\t\t\t});\n\t\t\t} else if (values.size > 1) {\n\t\t\t\tconditions.push({\n\t\t\t\t\tcolumn,\n\t\t\t\t\toperator: \"in\",\n\t\t\t\t\tvalue: null,\n\t\t\t\t\tvalues: Array.from(values),\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\treturn conditions;\n\t}\n\n\tasync close(): Promise<void> {\n\t\tawait this.db.destroy();\n\t}\n}\n"],"mappings":"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","names":[]}