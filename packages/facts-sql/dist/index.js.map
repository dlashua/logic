{"version":3,"sources":["../src/index.ts","../src/sql-datastore.ts"],"sourcesContent":["import type { AbstractRelationConfig } from \"@swiftfall/facts-abstract\";\nimport { createAbstractRelationSystem } from \"@swiftfall/facts-abstract\";\nimport type { Knex } from \"knex\";\nimport knex from \"knex\";\nimport type { BaseConfig as Configuration } from \"@swiftfall/logic\";\nimport { getDefaultLogger, Logger } from \"@swiftfall/logic\";\nimport { SqlDataStore } from \"./sql-datastore.js\";\n\n/**\n * SQL implementation using the abstract data layer\n * This is a drop-in replacement for the old facts-sql module\n */\nexport const makeRelDB = async (\n  knex_connect_options: Knex.Config,\n  options?: Record<string, string>,\n  configOverrides?: Partial<Configuration>,\n) => {\n  options ??= {};\n\n  const logger = getDefaultLogger();\n  const db = knex(knex_connect_options);\n\n  // Create SQL data store\n  const dataStore = new SqlDataStore(db);\n\n  // Configure the abstract relation system\n  const config: AbstractRelationConfig = {\n    batchSize: 100,\n    debounceMs: 50,\n    enableCaching: true,\n    enableQueryMerging: true,\n    ...configOverrides,\n  };\n\n  // Create the abstract relation system\n  const relationSystem = createAbstractRelationSystem(\n    dataStore,\n    logger,\n    config,\n  );\n\n  return {\n    rel: relationSystem.rel,\n    relSym: relationSystem.relSym,\n    db,\n    getQueries: relationSystem.getQueries,\n    clearQueries: relationSystem.clearQueries,\n    getQueryCount: relationSystem.getQueryCount,\n    close: relationSystem.close,\n  };\n};\n","import type {\n  DataRow,\n  DataStore,\n  QueryParams,\n  WhereCondition,\n} from \"@swiftfall/facts-abstract\";\nimport type { Knex } from \"knex\";\n\n/**\n * SQL implementation of DataStore using Knex\n * This wraps the existing SQL logic into the abstract interface\n */\nexport class SqlDataStore implements DataStore {\n  readonly type = \"sql\";\n\n  constructor(private db: Knex) {}\n\n  async executeQuery(params: QueryParams): Promise<DataRow[]> {\n    let query = this.db(params.relationIdentifier);\n\n    // Apply WHERE conditions\n    for (const condition of params.whereConditions) {\n      if (condition.operator === \"eq\") {\n        query = query.where(condition.column, condition.value);\n      } else if (condition.operator === \"in\" && condition.values) {\n        query = query.whereIn(condition.column, condition.values);\n      } else if (condition.operator === \"gt\") {\n        query = query.where(condition.column, \">\", condition.value);\n      } else if (condition.operator === \"lt\") {\n        query = query.where(condition.column, \"<\", condition.value);\n      } else if (condition.operator === \"gte\") {\n        query = query.where(condition.column, \">=\", condition.value);\n      } else if (condition.operator === \"lte\") {\n        query = query.where(condition.column, \"<=\", condition.value);\n      } else if (condition.operator === \"like\") {\n        query = query.where(condition.column, \"like\", condition.value);\n      }\n    }\n\n    // Select columns\n    query = query.select(params.selectColumns);\n\n    // Apply pagination if specified\n    if (params.limit) {\n      query = query.limit(params.limit);\n    }\n    if (params.offset) {\n      query = query.offset(params.offset);\n    }\n\n    // Log the actual SQL query\n    if (params.logQuery) {\n      params.logQuery(`${query.toString()}`);\n    }\n\n    return await query;\n  }\n\n  async getColumns(relationIdentifier: string): Promise<string[]> {\n    const result = await this.db(relationIdentifier).columnInfo();\n    return Object.keys(result);\n  }\n\n  buildWhereConditions(clauses: Record<string, Set<any>>): WhereCondition[] {\n    const conditions: WhereCondition[] = [];\n\n    for (const [column, values] of Object.entries(clauses)) {\n      if (values.size === 1) {\n        conditions.push({\n          column,\n          operator: \"eq\",\n          value: Array.from(values)[0],\n        });\n      } else if (values.size > 1) {\n        conditions.push({\n          column,\n          operator: \"in\",\n          value: null,\n          values: Array.from(values),\n        });\n      }\n    }\n\n    return conditions;\n  }\n\n  async close(): Promise<void> {\n    await this.db.destroy();\n  }\n}\n"],"mappings":"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","names":[]}